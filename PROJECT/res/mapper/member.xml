<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="member">
    <!-- 일반 로그인 쿼리 -->
    <select id="login" parameterType="memberVo" resultType="memberVo">
        SELECT 
            member_no as memberNo,
            member_id as memberId,
            member_pw as memberPw,
            member_name as memberName,
            membership_pw as membershipPw,
            birdate,
            gender,
            member_tel as memberTel,
            member_email as memberEmail,
            member_addr as memberAddr,
            kakao_id as kakaoId
        FROM MEM
        WHERE member_id = #{memberId}
        AND member_pw = #{memberPw}
    </select>
    
	    <!-- 카카오 ID로 회원 조회 -->
	<select id="findByKakaoId" parameterType="string" resultType="memberVo">
	    SELECT 
	        member_no as memberNo,
	        member_id as memberId,
	        member_pw as memberPw,
	        member_name as memberName,
	        membership_pw as membershipPw,
	        birdate,
	        gender,
	        member_tel as memberTel,
	        member_email as memberEmail,
	        member_addr as memberAddr,
	        kakao_id as kakaoId
	    FROM MEM
	    WHERE kakao_id = #{kakaoId}
	</select>

	<!-- 카카오 회원 등록 -->
	<insert id="registerKakaoMember" parameterType="memberVo">
	    INSERT INTO MEM (
	        member_no,
	        member_id,
	        member_pw,    <!-- member_pw 추가 -->
	        member_name,
	        <if test="memberEmail != null">member_email,</if>
	        kakao_id
	    ) VALUES (
	        (SELECT NVL(MAX(member_no), 0) + 1 FROM MEM),
	        #{memberId},
	        #{memberPw},  <!-- memberPw 추가 -->
	        #{memberName},
	        <if test="memberEmail != null">#{memberEmail},</if>
	        #{kakaoId}
	    )
	</insert>	
    
    <!-- 회원 목록 조회 -->
    <select id="getMemberList" resultType="memberVo">
        SELECT 
            member_no as memberNo,
            member_id as memberId,
            member_pw as memberPw,
            member_name as memberName,
            membership_pw as membershipPw,
            birdate,
            gender,
            member_tel as memberTel,
            member_email as memberEmail,
            member_addr as memberAddr,
            kakao_id as kakaoId
        FROM MEM
        ORDER BY member_no
    </select>
    
	    <!-- 이름과 이메일로 회원 존재 여부 확인 -->
	<select id="countMemberByNameAndEmail" parameterType="map" resultType="int">
	    SELECT COUNT(*) 
	    FROM MEM 
	    WHERE member_name = #{memberName} 
	    AND member_email = #{memberEmail}
	</select>
	
	<!-- 이메일로 회원 아이디 찾기 -->
	<select id="findMemberIdByEmail" parameterType="string" resultType="string">
	    SELECT member_id
	    FROM MEM
	    WHERE member_email = #{email}
	</select>
	
	<!-- 이메일 인증 코드 저장 -->
	<insert id="saveEmailVerificationCode" parameterType="map">
	    INSERT INTO EMAIL_VERIFICATION (
	        verification_id, email, verification_code, purpose, expire_date
	    ) VALUES (
	        email_verification_seq.NEXTVAL, #{email}, #{code}, #{purpose}, #{expireDate}
	    )
	</insert>
	
	<!-- 이메일 인증 코드 확인 -->
	<select id="verifyEmailCode" parameterType="map" resultType="int">
	    SELECT COUNT(*)
	    FROM EMAIL_VERIFICATION
	    WHERE email = #{email}
	    AND verification_code = #{code}
	    AND purpose = #{purpose}
	    AND expire_date > SYSDATE
	    AND is_verified = 'N'
	</select>
	
	<!-- 이메일 인증 상태 업데이트 -->
	<update id="updateEmailVerificationStatus" parameterType="map">
	    UPDATE EMAIL_VERIFICATION
	    SET is_verified = 'Y'
	    WHERE email = #{email}
	    AND verification_code = #{code}
	    AND purpose = #{purpose}
	</update>
	
	<!-- 아이디와 이메일로 회원 조회 -->
	<select id="findMemberByIdAndEmail" parameterType="map" resultType="memberVo">
	    SELECT 
	        member_no as memberNo,
	        member_id as memberId,
	        member_pw as memberPw,
	        member_name as memberName,
	        membership_pw as membershipPw,
	        birdate,
	        gender,
	        member_tel as memberTel,
	        member_email as memberEmail,
	        member_addr as memberAddr,
	        kakao_id as kakaoId
	    FROM MEM
	    WHERE member_id = #{memberId}
	    AND member_email = #{memberEmail}
	</select>
	<!-- 비밀번호 재설정 토큰 저장 -->
	<insert id="savePasswordResetToken" parameterType="map">
	    INSERT INTO PASSWORD_RESET_TOKEN (
	        token_id, member_no, token, expire_date
	    ) VALUES (
	        password_reset_token_seq.NEXTVAL, #{memberNo}, #{token}, SYSDATE + INTERVAL '24' HOUR
	    )
	</insert>
	
	
	<!-- 토큰으로 비밀번호 재설정 -->
	<update id="resetPasswordWithToken" parameterType="map">
	    UPDATE MEM
	    SET member_pw = #{newPassword}
	    WHERE member_no = (
	        SELECT member_no 
	        FROM PASSWORD_RESET_TOKEN 
	        WHERE token = #{token} 
	        AND member_no = #{memberNo}
	        AND expire_date > SYSDATE
	    )
	</update>
	
	
	<!-- 토큰 사용 상태 업데이트 -->
	<update id="updatePasswordResetTokenStatus" parameterType="map">
	    UPDATE PASSWORD_RESET
	    SET is_used = 'Y'
	    WHERE reset_token = #{resetToken}
	    AND member_no = #{memberNo}
	</update>
	
	<!-- 아이디 중복 확인 -->
	<select id="countMemberById" parameterType="string" resultType="int">
	    SELECT COUNT(*) 
	    FROM MEM 
	    WHERE member_id = #{memberId}
	</select>
	
	<!-- 일반 회원 등록 -->
	<insert id="registerMember" parameterType="memberVo">
	    INSERT INTO MEM (
	        member_no,
	        member_id,
	        member_pw,
	        member_name,
	        member_email
	        <if test="memberTel != null and memberTel != ''">, member_tel</if>
	        <if test="memberAddr != null and memberAddr != ''">, member_addr</if>
	    ) VALUES (
	        (SELECT NVL(MAX(member_no), 0) + 1 FROM MEM),
	        #{memberId},
	        #{memberPw},
	        #{memberName},
	        #{memberEmail}
	        <if test="memberTel != null and memberTel != ''">, #{memberTel}</if>
	        <if test="memberAddr != null and memberAddr != ''">, #{memberAddr}</if>
	    )
	</insert>
	
	
</mapper>